{
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Read",
        "hooks": [
          {
            "type": "command",
            "command": "echo '📖 確認: 読み取るファイルは正しいですか？'"
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "echo '⚠️ 新規作成前に確認: 既存ファイルの編集ではダメですか？作成場所は正しいですか？'"
          }
        ]
      },
      {
        "matcher": "Edit",
        "hooks": [
          {
            "type": "command",
            "command": "echo '✏️ 編集前に確認: 対象ファイルと編集内容は正しいですか？'"
          }
        ]
      },
      {
        "matcher": "Task",
        "hooks": [
          {
            "type": "command",
            "command": "echo '🚨 タスク実行前に確認: ユーザーに確認を取りましたか？作業内容は明確ですか？'"
          }
        ]
      },
      {
        "matcher": "TodoWrite",
        "hooks": [
          {
            "type": "command",
            "command": "echo '📋 ToDo更新前に確認: 実行計画をユーザーに提示しましたか？'"
          }
        ]
      }
    ]
  },
  "permissions": {
    "allow": [
      "Bash(npm *)",
      "Bash(yarn *)",
      "Bash(pnpm *)",
      "Bash(python *)",
      "Bash(pip *)",
      "Bash(go *)",
      "Bash(cargo *)",
      "Bash(docker *)",
      "Bash(git add *)",
      "Bash(git commit *)",
      "Bash(git push)",
      "Bash(git pull)",
      "Bash(git status)",
      "Bash(git diff)",
      "Bash(git log)",
      "Bash(git branch *)",
      "Bash(git checkout *)",
      "Bash(git merge *)",
      "Bash(git rebase *)",
      "Bash(ls *)",
      "Bash(cat *)",
      "Bash(grep *)",
      "Bash(find *)",
      "Bash(mkdir *)",
      "Bash(touch *)",
      "Bash(cp *)",
      "Bash(mv *)",
      "Bash(rm [!-]*)",
      "Bash(pwd)",
      "Bash(date *)",
      "Bash(whoami)",
      "Bash(which *)",
      "Bash(env)",
      "Bash(echo *)",
      "Bash(npm test)",
      "Bash(npm run *)",
      "Bash(yarn test)",
      "Bash(yarn run *)",
      "Bash(pytest *)",
      "Bash(go test *)",
      "Bash(cargo test *)",
      "Bash(make *)",
      "Bash(aws s3 ls *)",
      "Bash(aws ec2 describe-*)",
      "Bash(aws iam list-*)",
      "Bash(aws-bastion*)",
      "Bash(gh *)",
      "Bash(code *)",
      "Bash(vim *)",
      "Bash(nano *)",
      "Bash(jq *)",
      "Bash(curl *)",
      "Bash(wget *)",
      "Bash(ghq *)",
      "Bash(peco-src)",
      "Bash(fzf *)",
      "Bash(th *)"
    ],
    "deny": [
      "Bash(rm -rf /)",
      "Bash(rm -rf ~)",
      "Bash(rm -rf ~/*)",
      "Bash(rm -rf /*)",
      "Bash(rm -rf ~/)",
      "Bash(rm -rf .)",
      "Bash(rm -rf ..)",
      "Bash(rm -rf *)",
      "Bash(rm -rf .*)",
      "Bash(rm -rf ~/src)",
      "Bash(rm -rf ~/Documents)",
      "Bash(rm -rf ~/Desktop)",
      "Bash(rm -rf ~/Downloads)",
      "Bash(sudo rm*)",
      "Bash(sudo mv /etc/*)",
      "Bash(sudo chmod 777 /)",
      "Bash(sudo chown*)",
      "Bash(git push --force origin main)",
      "Bash(git push --force origin master)",
      "Bash(git reset --hard HEAD~*)",
      "Bash(git clean -fdx)",
      "Bash(sudo kill -9 *)",
      "Bash(sudo killall *)",
      "Bash(sudo pkill *)",
      "Bash(sudo ifconfig * down)",
      "Bash(sudo iptables -F)",
      "Bash(brew uninstall --force *)",
      "Bash(sudo apt-get purge *)",
      "Bash(sudo yum remove *)",
      "Read(~/.aws/credentials)",
      "Read(~/.ssh/id_rsa)",
      "Read(~/.ssh/id_ed25519)",
      "Read(~/.env)",
      "Read(~/.env.local)",
      "Read(~/.zsh_history)",
      "Read(~/.bash_history)",
      "Write(~/.zshrc)",
      "Write(~/.bashrc)",
      "Write(~/.gitconfig)",
      "Write(~/.ssh/config)"
    ]
  }
}